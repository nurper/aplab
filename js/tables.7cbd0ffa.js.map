{"version":3,"file":"js/tables.7cbd0ffa.js","mappings":"qmBAmCMA,GAAQ,QAAS,CACrBC,IAAK,IAAMC,EAAMC,WACjBC,IAAKJ,GAASK,EAAK,oBAAqBL,KAGpCM,EAAgBC,IACpBP,EAAMA,OAAQ,EACdK,EAAKE,IAGDC,EAAU,IAAMF,EAAc,WAE9BG,EAAS,IAAMH,EAAc,U,mwBC5CnC,MAAMI,EAAc,EAEpB,S,gWCgBMC,GAAiB,SAAS,IAAMT,EAAMU,QACxCC,EAAA,GAAcX,EAAMY,OACpB,CAACD,EAAA,GAASX,EAAMY,OAAQD,EAAA,GAAcX,EAAMY,UAE1CC,GAAc,SAAI,GAElBC,EAAU,KACdD,EAAYf,OAAQ,GAGhBiB,GAAQ,UAERC,GAAe,SAAS,IAAMD,EAAME,QAEpCC,GAAQ,UAERC,GAAW,SAAS,IAAMD,EAAME,MAAMD,W,4qBClC5C,MAAMX,EAAc,EAEpB,S,sHCJOa,MAAM,+C,mBAEJA,MAAM,a,GACJA,MAAM,0B,GACRA,MAAM,2B,GAINA,MAAM,kB,0CARb,QAWM,MAXN,EAWM,EAVJ,OAAyC,OAApCA,MAAM,SAAUC,IAAI,EAAAC,IAAKC,IAAI,EAAAC,QAAlC,WACA,OAKM,MALN,EAKM,EAJJ,OAAqD,MAArD,GAAqD,QAAd,EAAAC,OAAK,IAC5C,OAEI,IAFJ,GAEI,QADA,EAAAC,SAAO,MAGb,OAEM,MAFN,EAEM,gBADJ,QAAmK,mBAAxI,EAAAC,UAAQ,CAArBC,EAAGC,M,WAAjB,QAAmK,QAA7HC,IAAID,EAAMT,MAAM,iGAAgG,KAAC,QAAEQ,GAAC,MAA1J,UAMN,OACE7B,MAAO,CAAC,MAAO,SAAU,QAAS,UAAW,a,UCZ/C,MAAMQ,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASwB,KAEpE,QCaA,QAAe,CACbC,OACE,MAAO,CACLC,YAAa,CACXX,IAAK,2HACLC,IAAK,iBACLE,MAAO,kBACPC,QAAS,sJACTC,SAAU,CAAC,SAAU,WAAY,W,wbCzBzC,MAAM,EAAc,EAEpB,S,oTCOA,MAAMO,GAAU,SAAI,G,OAEpB,QAAMA,GAASC,IACbjC,EAAK,UAAWiC,M,uPCZlB,MAAM5B,EAAc,EAEpB,Q,s5BCUA,MAAMU,GAAQ,UAERC,GAAW,SAAS,IAAMD,EAAME,MAAMD,WAEtCkB,GAAQ,SAAS,IAAMnB,EAAME,MAAMkB,UAEnCC,GAAgB,SAAI,GAEpBC,GAAsB,SAAI,GAE1BC,GAAU,QAAI,IAEdC,GAAc,QAAI,GAElBC,GAAc,QAAI,IAElBC,GAAiB,SACrB,IAAMP,EAAMvC,MAAM+C,MAAMJ,EAAQ3C,MAAQ4C,EAAY5C,MAAO2C,EAAQ3C,OAAS4C,EAAY5C,MAAQ,MAG5FgD,GAAW,SAAS,IAAMC,KAAKC,KAAKX,EAAMvC,MAAMmD,OAASR,EAAQ3C,SAEjEoD,GAAmB,SAAS,IAAMR,EAAY5C,MAAQ,IAEtDqD,GAAY,SAAS,KACzB,MAAMA,EAAY,GAElB,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAShD,MAAOsD,IAClCD,EAAUE,KAAKD,GAGjB,OAAOD,KAGHG,EAAS,CAACC,EAAKC,KACnB,MAAMC,EAAS,GAQf,OANAF,EAAIG,SAAQC,IACLH,EAAGG,IACNF,EAAOJ,KAAKM,MAITF,GAGHtB,EAAU,CAACyB,EAAWC,KACtBD,EACFjB,EAAY7C,MAAMuD,KAAKQ,GAEvBlB,EAAY7C,MAAQwD,EAAOX,EAAY7C,OAAOgE,GAAOA,EAAIC,KAAOF,EAAOE,M,irEC9D3E,MAAM,EAAc,EAEpB,Q,gWCOA,MAAMC,GAAa,QAAI,CAAC,QAAS,W,u8BCTjC,MAAM,GAAc,GAEpB","sources":["webpack://news-feed/./src/components/ModalBox.vue","webpack://news-feed/./src/components/ModalBox.vue?fb36","webpack://news-feed/./src/components/Notification.vue","webpack://news-feed/./src/components/Notification.vue?0a60","webpack://news-feed/./src/components/NewsCard.vue","webpack://news-feed/./src/components/NewsCard.vue?6e9f","webpack://news-feed/./src/views/NewsFeed.vue","webpack://news-feed/./src/views/NewsFeed.vue?5c78","webpack://news-feed/./src/components/CheckboxCell.vue","webpack://news-feed/./src/components/CheckboxCell.vue?7f59","webpack://news-feed/./src/components/ClientsTable.vue","webpack://news-feed/./src/components/ClientsTable.vue?994e","webpack://news-feed/./src/views/Tables.vue","webpack://news-feed/./src/views/Tables.vue?1b01"],"sourcesContent":["<script setup>\nimport { computed } from 'vue'\nimport { mdiClose } from '@mdi/js'\nimport JbButton from '@/components/JbButton.vue'\nimport JbButtons from '@/components/JbButtons.vue'\nimport CardComponent from '@/components/CardComponent.vue'\nimport Divider from '@/components/Divider.vue'\nimport Overlay from '@/components/Overlay.vue'\n\nconst props = defineProps({\n  title: {\n    type: String,\n    default: null\n  },\n  largeTitle: {\n    type: String,\n    default: null\n  },\n  button: {\n    type: String,\n    default: 'info'\n  },\n  buttonLabel: {\n    type: String,\n    default: 'Done'\n  },\n  hasCancel: Boolean,\n  modelValue: {\n    type: [String, Number, Boolean],\n    default: null\n  }\n})\n\nconst emit = defineEmits(['update:modelValue', 'cancel', 'confirm'])\n\nconst value = computed({\n  get: () => props.modelValue,\n  set: value => emit('update:modelValue', value)\n})\n\nconst confirmCancel = mode => {\n  value.value = false\n  emit(mode)\n}\n\nconst confirm = () => confirmCancel('confirm')\n\nconst cancel = () => confirmCancel('cancel')\n</script>\n\n<template>\n  <overlay\n    v-show=\"value\"\n    @overlay-click=\"cancel\"\n  >\n    <card-component\n      v-show=\"value\"\n      :title=\"title\"\n      class=\"shadow-lg w-full max-h-modal md:w-3/5 lg:w-2/5 z-50\"\n      :header-icon=\"mdiClose\"\n      @header-icon-click=\"cancel\"\n    >\n      <div class=\"space-y-3\">\n        <h1\n          v-if=\"largeTitle\"\n          class=\"text-2xl\"\n        >\n          {{ largeTitle }}\n        </h1>\n        <slot />\n      </div>\n\n      <divider />\n\n      <jb-buttons>\n        <jb-button\n          :label=\"buttonLabel\"\n          :color=\"button\"\n          @click=\"confirm\"\n        />\n        <jb-button\n          v-if=\"hasCancel\"\n          label=\"Cancel\"\n          :color=\"button\"\n          outline\n          @click=\"cancel\"\n        />\n      </jb-buttons>\n    </card-component>\n  </overlay>\n</template>\n","import script from \"./ModalBox.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ModalBox.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { ref, computed, useSlots } from 'vue'\nimport { useStore } from 'vuex'\nimport { mdiClose } from '@mdi/js'\nimport { colorsBg, colorsBorders, colorsOutline } from '@/colors.js'\nimport Level from '@/components/Level.vue'\nimport Icon from '@/components/Icon.vue'\nimport JbButton from '@/components/JbButton.vue'\n\nconst props = defineProps({\n  icon: {\n    type: String,\n    default: null\n  },\n  outline: Boolean,\n  color: {\n    type: String,\n    required: true\n  }\n})\n\nconst componentClass = computed(() => props.outline\n  ? colorsOutline[props.color]\n  : [colorsBg[props.color], colorsBorders[props.color]])\n\nconst isDismissed = ref(false)\n\nconst dismiss = () => {\n  isDismissed.value = true\n}\n\nconst slots = useSlots()\n\nconst hasRightSlot = computed(() => slots.right)\n\nconst store = useStore()\n\nconst darkMode = computed(() => store.state.darkMode)\n</script>\n\n<template>\n  <div\n    v-if=\"!isDismissed\"\n    :class=\"componentClass\"\n    class=\"px-3 py-6 md:py-3 mx-6 md:mx-0 mb-6 last:mb-0 border rounded transition-colors duration-150\"\n  >\n    <level>\n      <div class=\"flex flex-col md:flex-row items-center\">\n        <icon\n          v-if=\"icon\"\n          :path=\"icon\"\n          w=\"w-10 md:w-5\"\n          h=\"h-10 md:h-5\"\n          size=\"24\"\n          class=\"md:mr-2\"\n        />\n        <span class=\"text-center md:text-left\"><slot /></span>\n      </div>\n      <slot\n        v-if=\"hasRightSlot\"\n        name=\"right\"\n      />\n      <jb-button\n        v-else\n        :icon=\"mdiClose\"\n        :outline=\"outline || (darkMode && ['white', 'light'].indexOf(color) < 0)\"\n        small\n        @click=\"dismiss\"\n      />\n    </level>\n  </div>\n</template>\n","import script from \"./Notification.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Notification.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <div class=\"max-w-3xl rounded overflow-hidden shadow-lg\">\n    <img class=\"w-full\" :src=img :alt=imgAlt>\n    <div class=\"px-6 py-4\">\n      <div class=\"font-bold text-xl mb-2\">{{ title }}</div>\n      <p class=\"text-gray-700 text-base\">\n        {{content}}\n      </p>\n    </div>\n    <div class=\"px-6 pt-4 pb-2\">\n      <span v-for=\"(h, index) in hashtags\" :key=index class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">#{{h}}</span>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['img', 'imgAlt', 'title', 'content', 'hashtags']\n}\n</script>\n","import { render } from \"./NewsCard.vue?vue&type=template&id=2af6136c\"\nimport script from \"./NewsCard.vue?vue&type=script&lang=js\"\nexport * from \"./NewsCard.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/aplab/aplab/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script setup>\nimport MainSection from '@/components/MainSection.vue'\nimport NewsCard from '@/components/NewsCard'\n</script>\n\n<template>\n  <main-section>\n    <div v-for=\"i in 10\" :key=\"i\" class=\"flex justify-center pt-8\">\n      <news-card\n        :img=\"newsContent.img\"\n        :content=\"newsContent.content\"\n        :hashtags=\"newsContent.hashtags\"\n        :title=\"newsContent.title\"\n        :img-alt=\"newsContent.alt\"\n      ></news-card>\n    </div>\n  </main-section>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      newsContent: {\n        img: 'https://marmotamaps.com/de/fx/wallpaper/download/faszinationen/Marmotamaps_Wallpaper_Berchtesgaden_Desktop_1920x1080.jpg',\n        alt: 'No image found',\n        title: 'Some news title',\n        content: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus quia, Nonea! Maiores et perferendis eaque, exercitationem praesentium nihil.',\n        hashtags: ['travel', 'mountain', 'sky']\n      }\n    }\n  }\n}\n</script>\n","import script from \"./NewsFeed.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NewsFeed.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { ref, watch } from 'vue'\n\ndefineProps({\n  type: {\n    type: String,\n    default: 'td'\n  }\n})\n\nconst emit = defineEmits(['checked'])\n\nconst checked = ref(false)\n\nwatch(checked, newVal => {\n  emit('checked', newVal)\n})\n</script>\n\n<template>\n  <component\n    :is=\"type\"\n    class=\"checkbox-cell\"\n  >\n    <label class=\"checkbox\">\n      <input\n        v-model=\"checked\"\n        type=\"checkbox\"\n      >\n      <span class=\"check\" />\n    </label>\n  </component>\n</template>\n","import script from \"./CheckboxCell.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CheckboxCell.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { computed, ref } from 'vue'\nimport { useStore } from 'vuex'\nimport { mdiEye, mdiTrashCan } from '@mdi/js'\nimport ModalBox from '@/components/ModalBox.vue'\nimport CheckboxCell from '@/components/CheckboxCell.vue'\nimport Level from '@/components/Level.vue'\nimport JbButtons from '@/components/JbButtons.vue'\nimport JbButton from '@/components/JbButton.vue'\nimport UserAvatar from '@/components/UserAvatar.vue'\n\ndefineProps({\n  checkable: Boolean\n})\n\nconst store = useStore()\n\nconst darkMode = computed(() => store.state.darkMode)\n\nconst items = computed(() => store.state.clients)\n\nconst isModalActive = ref(false)\n\nconst isModalDangerActive = ref(false)\n\nconst perPage = ref(10)\n\nconst currentPage = ref(0)\n\nconst checkedRows = ref([])\n\nconst itemsPaginated = computed(\n  () => items.value.slice(perPage.value * currentPage.value, perPage.value * (currentPage.value + 1))\n)\n\nconst numPages = computed(() => Math.ceil(items.value.length / perPage.value))\n\nconst currentPageHuman = computed(() => currentPage.value + 1)\n\nconst pagesList = computed(() => {\n  const pagesList = []\n\n  for (let i = 0; i < numPages.value; i++) {\n    pagesList.push(i)\n  }\n\n  return pagesList\n})\n\nconst remove = (arr, cb) => {\n  const newArr = []\n\n  arr.forEach(item => {\n    if (!cb(item)) {\n      newArr.push(item)\n    }\n  })\n\n  return newArr\n}\n\nconst checked = (isChecked, client) => {\n  if (isChecked) {\n    checkedRows.value.push(client)\n  } else {\n    checkedRows.value = remove(checkedRows.value, row => row.id === client.id)\n  }\n}\n</script>\n\n<template>\n  <modal-box\n    v-model=\"isModalActive\"\n    title=\"Sample modal\"\n  >\n    <p>Lorem ipsum dolor sit amet <b>adipiscing elit</b></p>\n    <p>This is sample modal</p>\n  </modal-box>\n\n  <modal-box\n    v-model=\"isModalDangerActive\"\n    large-title=\"Please confirm\"\n    button=\"danger\"\n    has-cancel\n  >\n    <p>Lorem ipsum dolor sit amet <b>adipiscing elit</b></p>\n    <p>This is sample modal</p>\n  </modal-box>\n\n  <div\n    v-if=\"checkedRows.length\"\n    class=\"bg-gray-50 p-3 dark:bg-gray-800\"\n  >\n    <span\n      v-for=\"checkedRow in checkedRows\"\n      :key=\"checkedRow.id\"\n      class=\"inline-block bg-gray-100 px-2 py-1 rounded-sm mr-2 text-sm dark:bg-gray-700\"\n    >\n      {{ checkedRow.name }}\n    </span>\n  </div>\n\n  <table>\n    <thead>\n      <tr>\n        <th v-if=\"checkable\" />\n        <th />\n        <th>Name</th>\n        <th>Company</th>\n        <th>City</th>\n        <th>Progress</th>\n        <th>Created</th>\n        <th />\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        v-for=\"client in itemsPaginated\"\n        :key=\"client.id\"\n      >\n        <checkbox-cell\n          v-if=\"checkable\"\n          @checked=\"checked($event, client)\"\n        />\n        <td class=\"image-cell\">\n          <user-avatar\n            :username=\"client.name\"\n            class=\"image\"\n          />\n        </td>\n        <td data-label=\"Name\">\n          {{ client.name }}\n        </td>\n        <td data-label=\"Company\">\n          {{ client.company }}\n        </td>\n        <td data-label=\"City\">\n          {{ client.city }}\n        </td>\n        <td\n          data-label=\"Progress\"\n          class=\"progress-cell\"\n        >\n          <progress\n            max=\"100\"\n            :value=\"client.progress\"\n          >\n            {{ client.progress }}\n          </progress>\n        </td>\n        <td data-label=\"Created\">\n          <small\n            class=\"text-gray-500 dark:text-gray-400\"\n            :title=\"client.created\"\n          >{{ client.created }}</small>\n        </td>\n        <td class=\"actions-cell\">\n          <jb-buttons\n            type=\"justify-start lg:justify-end\"\n            no-wrap\n          >\n            <jb-button\n              color=\"success\"\n              :icon=\"mdiEye\"\n              small\n              @click=\"isModalActive = true\"\n            />\n            <jb-button\n              color=\"danger\"\n              :icon=\"mdiTrashCan\"\n              small\n              @click=\"isModalDangerActive = true\"\n            />\n          </jb-buttons>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <div class=\"table-pagination\">\n    <level>\n      <jb-buttons>\n        <jb-button\n          v-for=\"page in pagesList\"\n          :key=\"page\"\n          :active=\"page === currentPage\"\n          :label=\"page + 1\"\n          :outline=\"darkMode\"\n          small\n          @click=\"currentPage = page\"\n        />\n      </jb-buttons>\n      <small>Page {{ currentPageHuman }} of {{ numPages }}</small>\n    </level>\n  </div>\n</template>\n","import script from \"./ClientsTable.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ClientsTable.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport { ref } from 'vue'\nimport { mdiMonitorCellphone, mdiAccountMultiple, mdiTableBorder, mdiTableOff } from '@mdi/js'\nimport MainSection from '@/components/MainSection.vue'\nimport Notification from '@/components/Notification.vue'\nimport ClientsTable from '@/components/ClientsTable.vue'\nimport CardComponent from '@/components/CardComponent.vue'\nimport TitleBar from '@/components/TitleBar.vue'\nimport HeroBar from '@/components/HeroBar.vue'\nimport BottomOtherPagesSection from '@/components/BottomOtherPagesSection.vue'\nimport TitleSubBar from '@/components/TitleSubBar.vue'\n\nconst titleStack = ref(['Admin', 'Tables'])\n</script>\n\n<template>\n  <title-bar :title-stack=\"titleStack\" />\n  <hero-bar>Tables</hero-bar>\n  <main-section>\n    <notification\n      color=\"info\"\n      :icon=\"mdiMonitorCellphone\"\n    >\n      <b>Responsive table.</b> Collapses on mobile\n    </notification>\n\n    <card-component\n      class=\"mb-6\"\n      title=\"Clients\"\n      :icon=\"mdiAccountMultiple\"\n      has-table\n    >\n      <clients-table checkable />\n    </card-component>\n\n    <title-sub-bar\n      :icon=\"mdiTableBorder\"\n      title=\"Wrapped variation\"\n    />\n\n    <notification\n      color=\"success\"\n      :icon=\"mdiTableBorder\"\n    >\n      <b>Tightly wrapped</b> &mdash; table header becomes card header\n    </notification>\n\n    <card-component\n      class=\"mb-6\"\n      has-table\n    >\n      <clients-table checkable />\n    </card-component>\n\n    <title-sub-bar\n      :icon=\"mdiTableOff\"\n      title=\"Empty variation\"\n    />\n\n    <notification\n      color=\"danger\"\n      :icon=\"mdiTableOff\"\n    >\n      <b>Empty table.</b> When there's nothing to show\n    </notification>\n\n    <card-component empty />\n  </main-section>\n\n  <bottom-other-pages-section />\n</template>\n","import script from \"./Tables.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Tables.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["value","get","props","modelValue","set","emit","confirmCancel","mode","confirm","cancel","__exports__","componentClass","outline","colors","color","isDismissed","dismiss","slots","hasRightSlot","right","store","darkMode","state","class","src","img","alt","imgAlt","title","content","hashtags","h","index","key","render","data","newsContent","checked","newVal","items","clients","isModalActive","isModalDangerActive","perPage","currentPage","checkedRows","itemsPaginated","slice","numPages","Math","ceil","length","currentPageHuman","pagesList","i","push","remove","arr","cb","newArr","forEach","item","isChecked","client","row","id","titleStack"],"sourceRoot":""}